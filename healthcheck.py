#!/usr/bin/env python
"""
Script de verifica√ß√£o de sa√∫de para o servi√ßo WhatsApp OpenAI Assistant.
Este script verifica se todos os componentes necess√°rios est√£o funcionando corretamente.
"""

import os
import sys
import requests
import time
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def check_env_vars():
    """Verifica se todas as vari√°veis de ambiente necess√°rias est√£o definidas."""
    required_vars = [
        'TWILIO_ACCOUNT_SID',
        'TWILIO_AUTH_TOKEN',
        'OPENAI_API_KEY',
        'OPENAI_ASSISTANT_ID'
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente ausentes: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Todas as vari√°veis de ambiente necess√°rias est√£o definidas")
    return True

def check_web_server():
    """Verifica se o servidor web est√° respondendo."""
    try:
        port = os.getenv('PORT', '5000')
        response = requests.get(f"http://localhost:{port}/health", timeout=5)
        
        if response.status_code == 200:
            print(f"‚úÖ Servidor web respondendo na porta {port}")
            return True
        else:
            print(f"‚ùå Servidor web retornou c√≥digo de status {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå N√£o foi poss√≠vel conectar ao servidor web: {e}")
        return False

def check_openai_api():
    """Verifica se a API da OpenAI est√° acess√≠vel."""
    from openai import OpenAI
    
    try:
        api_key = os.getenv('OPENAI_API_KEY')
        client = OpenAI(api_key=api_key)
        models = client.models.list()
        
        if models:
            print("‚úÖ API da OpenAI est√° acess√≠vel")
            return True
        else:
            print("‚ùå N√£o foi poss√≠vel obter a lista de modelos da OpenAI")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar a API da OpenAI: {e}")
        return False

def check_twilio_api():
    """Verifica se a API do Twilio est√° acess√≠vel."""
    from twilio.rest import Client
    
    try:
        account_sid = os.getenv('TWILIO_ACCOUNT_SID')
        auth_token = os.getenv('TWILIO_AUTH_TOKEN')
        
        client = Client(account_sid, auth_token)
        account = client.api.accounts(account_sid).fetch()
        
        if account.sid:
            print("‚úÖ API do Twilio est√° acess√≠vel")
            return True
        else:
            print("‚ùå N√£o foi poss√≠vel acessar a conta do Twilio")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar a API do Twilio: {e}")
        return False

def main():
    """Fun√ß√£o principal que executa todas as verifica√ß√µes."""
    print("üîç Iniciando verifica√ß√£o de sa√∫de do sistema...")
    start_time = time.time()
    
    checks = [
        ("Vari√°veis de ambiente", check_env_vars),
        ("Servidor web", check_web_server),
        ("API da OpenAI", check_openai_api),
        ("API do Twilio", check_twilio_api)
    ]
    
    results = []
    
    for name, check_func in checks:
        print(f"\n‚è≥ Verificando {name}...")
        try:
            result = check_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erro ao executar verifica√ß√£o de {name}: {e}")
            results.append(False)
    
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "="*50)
    print(f"üìä Resumo da verifica√ß√£o de sa√∫de (dura√ß√£o: {duration:.2f}s):")
    
    all_passed = all(results)
    
    for i, (name, _) in enumerate(checks):
        status = "‚úÖ PASSOU" if results[i] else "‚ùå FALHOU"
        print(f"{name}: {status}")
    
    print("\nüìù Resultado final:", "‚úÖ SAUD√ÅVEL" if all_passed else "‚ùå INSALUBRE")
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())
